type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

type NftData = record {
  total_supply: nat64;
  mint_flag: bool;
  adventure_gap: nat64;
  tokens: vec record { nat64; principal};
  controllers: vec principal;
  claim_index: nat64;
  token_seeds: vec record { nat64; nat64};

  xp:  vec record { nat64; nat64};
  level: vec record { nat64; nat64};

  attribute_points: vec record { nat64; nat64};
  attr_strength: vec record { nat64; nat64};
  attr_agility: vec record { nat64; nat64};
  attr_intelligence: vec record { nat64; nat64};
  adventurers_log:  vec record { nat64; nat64};
};

type ClaimResult = variant {
  Ok : nat64;
  Err: text;
};

type AdventureResult = variant {
  Ok : text;
  Err: text;
};

service : {
    http_request: (request: HttpRequest) -> (HttpResponse) query;

    get_nft_data: () -> (NftData) query;
    get_token_properties: (nat64) -> (vec record { text; text}) query;

    get_airdrops: () -> (vec record { nat64; bool }) query;
    add_airdrops: (vec principal) -> (bool);
    name: () -> (text) query;
    symbol: () -> (text) query;
    user_tokens: (principal) -> (vec nat64) query;
    owner_of: (nat64) -> (opt principal) query;
    transfer_to: (principal, nat64) -> (bool);

    adventure: (nat64) -> (AdventureResult);
    add_points: (nat64,nat64,nat64) -> (AdventureResult);

    mint_on: ()  -> (bool);
    mint_off: ()  -> (bool);
    get_mint_flag: ()  -> (bool) query;

    queryxp: (nat64) ->  (nat64) query;
    querygap: (nat64) ->  (nat64) query;
    querypoint: (nat64) ->  (nat64) query;
    querylevel: (nat64) ->  (nat64) query;


    claim: () -> (ClaimResult);
    remaining: () -> (nat64);
    supply: () -> (nat64);

    get_controllers: () -> (vec principal) query;
    add_controller: (principal) -> (bool);
    remove_controller: (principal) -> (bool);
}
